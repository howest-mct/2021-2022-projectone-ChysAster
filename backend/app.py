# imports
import time
from RPi import GPIO
import threading
from spidev import SpiDev
from flask_cors import CORS
from flask_socketio import SocketIO, emit, send
from flask import Flask, jsonify, request
from repositories.DataRepository import DataRepository
from subprocess import check_output
from selenium import webdriver
from pylcdlib import lcd4bit
from serial import Serial, PARITY_NONE

# get ip adres
ips = check_output(['hostname', '--all-ip-addresses'])
zonderB = str(ips)[18:32]
# write ip adres to lcd
mylcd = lcd4bit()
mylcd.write_message(zonderB)

# set your batch numbers
batchGeel = 188
batchBlauw = 129

kleur = ''

# pin numbers of connected ir sensors
eersteKolom = 21
tweedeKolom = 26
derdeKolom = 20
vierdeKolom = 16
vijfdeKolom = 19
zesdeKolom = 13
zevendeKolom = 6

# pin numbers of buzzer
buzzer = 18
buzzer2 = 17

# api endpoint
endpoint = '/api/v1'

# setup serial perhipheral interface
spi = SpiDev()
spi2 = SpiDev()
spi2.open(0, 1)
spi.open(0, 0)  # Bus is 0, device is chosen CE-pin (0 or 1)
spi.max_speed_hz = 100  # setup clock frequency
spi2.max_speed_hz = 100

# setup your pi hardware
def setup_gpio():
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(eersteKolom, GPIO.IN)
    GPIO.setup(tweedeKolom, GPIO.IN)
    GPIO.setup(derdeKolom, GPIO.IN)
    GPIO.setup(vierdeKolom, GPIO.IN)
    GPIO.setup(vijfdeKolom, GPIO.IN)
    GPIO.setup(zesdeKolom, GPIO.IN)
    GPIO.setup(zevendeKolom, GPIO.IN)
    GPIO.setup(buzzer, GPIO.OUT)
    GPIO.setup(buzzer2, GPIO.OUT)
    spi.writebytes([0x9, 0])
    spi.writebytes([0xa, 0])
    spi.writebytes([0xb, 7])
    spi.writebytes([0xc, 1])
    spi2.writebytes([0x9, 0])
    spi2.writebytes([0xa, 0])
    spi2.writebytes([0xb, 7])
    spi2.writebytes([0xc, 1])


# Flask code
app = Flask(__name__)
app.config['SECRET_KEY'] = 'geheim!'
socketio = SocketIO(app, cors_allowed_origins="*", logger=False,
                    engineio_logger=False, ping_timeout=1)

CORS(app)

# socketia error handling
@socketio.on_error()
def error_handler(e):
    print(e)


# API ENDPOINTS
@app.route('/')
def hallo():
    return "Server is running, er zijn momenteel geen API endpoints beschikbaar."


@app.route(endpoint + '/activiteiten/', methods=['GET'])
def get_activiteit():
    if request.method == 'GET':

        return jsonify(activiteit=DataRepository.random_activiteit()), 200


@app.route(endpoint + '/historiek/', methods=['GET'])
def get_historiek():
    if request.method == 'GET':
        return jsonify(historiek=DataRepository.get_historiek()), 200


# @socketio.on()
# first connection socket
@socketio.on('connect')
def initial_connection():
    print('A new client connect')

# socket to start timer yellow
@socketio.on('F2B_opdracht_geel_minuten')
def opdracht_geel_timer(jsonObject):
    if(jsonObject == 1):
        start_thread_aftellen_een_minuten()
    elif(jsonObject == 3):
        start_thread_aftellen_drie_minuten()
    elif(jsonObject == 5):
        start_thread_aftellen_vijf_minuten()

# socket to start timer blue
@socketio.on('F2B_opdracht_blauw_minuten')
def opdracht_blauw_timer(jsonObject):
    if(jsonObject == 1):
        start_thread_aftellen_een_minuten2()
    elif(jsonObject == 3):
        start_thread_aftellen_een_minuten2()
    elif(jsonObject == 5):
        start_thread_aftellen_een_minuten2()

# function to get temp
def temperatuur():
    sensor_file_name = '/sys/bus/w1/devices/28-00000003b2c6/w1_slave'

    sensor_file = open(sensor_file_name, 'r')
    for line in sensor_file:
        lijn = line.rstrip("\n")
        t = lijn.find("t=")

    if(t != -1):
        temp = int(lijn.split("t=")[1])
        return round(temp/1000, 2)

# function that sends temp to backend + sends temp to database
def data_versturen():
    while True:
        print("temperatuur versturen")
        socketio.emit('B2F_status_temp', {
                      'temperatuur': temperatuur()}, broadcast=True)
        DataRepository.create_historiek(2, temperatuur())
        time.sleep(15)

# thread for temp
def start_thread():
    print("**** Starting THREAD ****")
    thread = threading.Thread(target=data_versturen, args=(), daemon=True)
    thread.start()

# function that gets serial data(rfid) from arduino + controls if it is yellow or blue and sens it to frontend
def read_serial():
    with Serial('/dev/ttyS0', 9600, bytesize=8, parity=PARITY_NONE, stopbits=1) as port:
        while True:
            if port.in_waiting > 0:
                line = port.readline().decode('utf-8')  .rstrip()
                print(line)
                if line == str(batchGeel):
                    DataRepository.create_historiek(1, "geel")
                    # socketio.emit('B2F_rfid_data_geel', "geel", broadcast=True)
                    kleur = 'geel'
                    if(temperatuur() > 24):
                        activiteit_geel = DataRepository.random_activiteit_water()
                    elif(temperatuur() < 24):
                        activiteit_geel = DataRepository.random_activiteit()
                    socketio.emit('B2F_opdracht_geel',
                                  activiteit_geel, broadcast=True)
                elif line == str(batchBlauw):
                    DataRepository.create_historiek(1, "blauw")
                    # socketio.emit('B2F_rfid_data_rood', "rood", broadcast=True)
                    kleur = 'blauw'
                    if(temperatuur() > 24):
                        activiteit_blauw = DataRepository.random_activiteit_water()
                    elif(temperatuur() < 24):
                        activiteit_blauw = DataRepository.random_activiteit()
                    socketio.emit('B2F_opdracht_blauw',
                                  activiteit_blauw, broadcast=True)
                socketio.emit('B2F_rfid_data', kleur, broadcast=True)

# thread for serial
def thread_serial():
    print("**** Starting THREAD serial ****")
    thread = threading.Thread(target=read_serial, args=())
    thread.start()

# frontend sends the played activity to backend and sets it as played in database
@socketio.on('F2B_opdracht_geel_is_gespeeld')
def set_geel_gespeeld(Activiteit):
    DataRepository.set_gespeeld_geel(Activiteit)

# frontend sends the played activity to backend and sets it as played in database
@socketio.on('F2B_opdracht_blauw_is_gespeeld')
def set_blauw_gespeeld(Activiteit):
    DataRepository.set_gespeeld_blauw(Activiteit)

# thread for timer game
def start_thread_aftellen_een_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_een_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game
def start_thread_aftellen_drie_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_drie_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game
def start_thread_aftellen_vijf_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_vijf_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game
def start_thread_aftellen_een_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_een_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game
def start_thread_aftellen_drie_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_drie_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game
def start_thread_aftellen_vijf_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_vijf_minuten, args=(), daemon=True)
    thread.start()


# threads colums
def eerste_kolom():
    while True:
        if(GPIO.input(eersteKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_eerste_kolom', 0)
            time.sleep(5)

def thread_eerste_kolom():
    print("infrarood eerste kolom thread")
    thread = threading.Thread(target=eerste_kolom)
    thread.start()

def tweede_kolom():
    while True:
        if(GPIO.input(tweedeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_tweede_kolom', 1)
            time.sleep(5)

def thread_tweede_kolom():
    print("infrarood tweede kolom thread")
    thread = threading.Thread(target=tweede_kolom)
    thread.start()

def derde_kolom():
    while True:
        if(GPIO.input(derdeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_derde_kolom', 2)
            time.sleep(5)

def thread_derde_kolom():
    print("infrarood derde kolom thread")
    thread = threading.Thread(target=derde_kolom)
    thread.start()

def vierde_kolom():
    while True:
        if(GPIO.input(vierdeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_vierde_kolom', 3)
            time.sleep(5)

def thread_vierde_kolom():
    print("infrarood vierde kolom thread")
    thread = threading.Thread(target=vierde_kolom)
    thread.start()

def vijfde_kolom():
    while True:
        if(GPIO.input(vijfdeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_vijfde_kolom', 4)
            time.sleep(5)

def thread_vijfde_kolom():
    print("infrarood vijfde kolom thread")
    thread = threading.Thread(target=vijfde_kolom)
    thread.start()

def zesde_kolom():
    while True:
        if(GPIO.input(zesdeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_zesde_kolom', 5)
            time.sleep(5)

def thread_zesde_kolom():
    print("infrarood zesde kolom thread")
    thread = threading.Thread(target=zesde_kolom)
    thread.start()

def zevende_kolom():
    while True:
        if(GPIO.input(zevendeKolom) == False):
            print("versturen infrarood")
            socketio.emit('B2F_zevende_kolom', 6)
            time.sleep(5)

def thread_zevende_kolom():
    print("infrarood zevende kolom thread")
    thread = threading.Thread(target=zevende_kolom)
    thread.start()

# buzzer and matrix
def buzzer_einde():
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)


def buzzer_einde2():
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)


def timer():
    spi.writebytes([0x1, 0b10000000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11000000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11100000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11110000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111100])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111110])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000001])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000011])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00001111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00011111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b01111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b10000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11100001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11110001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111101])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000011])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10001111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10011111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11000011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11100011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11110011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11000111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11001111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11011111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11100111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11100111])
    spi.writebytes([0x5, 0b11100111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)


def timer2():
    spi2.writebytes([0x1, 0b10000000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11000000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11100000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11110000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111100])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111110])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000001])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000011])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00001111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00011111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b01111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b10000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11100001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11110001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111101])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000011])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10001111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10011111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11000011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11100011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11110011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11000111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11001111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11011111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11100111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11100111])
    spi2.writebytes([0x5, 0b11100111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)


def cijferEen():
    spi.writebytes([0x1, 0b00001000])
    spi.writebytes([0x2, 0b00011000])
    spi.writebytes([0x3, 0b00001000])
    spi.writebytes([0x4, 0b00001000])
    spi.writebytes([0x5, 0b00001000])
    spi.writebytes([0x6, 0b00001000])
    spi.writebytes([0x7, 0b00001000])
    spi.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferEen2():
    spi2.writebytes([0x1, 0b00001000])
    spi2.writebytes([0x2, 0b00011000])
    spi2.writebytes([0x3, 0b00001000])
    spi2.writebytes([0x4, 0b00001000])
    spi2.writebytes([0x5, 0b00001000])
    spi2.writebytes([0x6, 0b00001000])
    spi2.writebytes([0x7, 0b00001000])
    spi2.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferTwee():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111000])
    spi.writebytes([0x3, 0b01000100])
    spi.writebytes([0x4, 0b00000100])
    spi.writebytes([0x5, 0b00001000])
    spi.writebytes([0x6, 0b00010000])
    spi.writebytes([0x7, 0b00100000])
    spi.writebytes([0x8, 0b01111100])
    time.sleep(1)


def cijferTwee2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111000])
    spi2.writebytes([0x3, 0b01000100])
    spi2.writebytes([0x4, 0b00000100])
    spi2.writebytes([0x5, 0b00001000])
    spi2.writebytes([0x6, 0b00010000])
    spi2.writebytes([0x7, 0b00100000])
    spi2.writebytes([0x8, 0b01111100])
    time.sleep(1)


def cijferDrie():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111000])
    spi.writebytes([0x3, 0b01000100])
    spi.writebytes([0x4, 0b00000100])
    spi.writebytes([0x5, 0b00011000])
    spi.writebytes([0x6, 0b00000100])
    spi.writebytes([0x7, 0b01000100])
    spi.writebytes([0x8, 0b00111000])
    time.sleep(1)


def cijferDrie2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111000])
    spi2.writebytes([0x3, 0b01000100])
    spi2.writebytes([0x4, 0b00000100])
    spi2.writebytes([0x5, 0b00011000])
    spi2.writebytes([0x6, 0b00000100])
    spi2.writebytes([0x7, 0b01000100])
    spi2.writebytes([0x8, 0b00111000])
    time.sleep(1)


def cijferVier():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00000100])
    spi.writebytes([0x3, 0b00001100])
    spi.writebytes([0x4, 0b00010100])
    spi.writebytes([0x5, 0b00100100])
    spi.writebytes([0x6, 0b01111110])
    spi.writebytes([0x7, 0b00000100])
    spi.writebytes([0x8, 0b00000100])
    time.sleep(1)


def cijferVier2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00000100])
    spi2.writebytes([0x3, 0b00001100])
    spi2.writebytes([0x4, 0b00010100])
    spi2.writebytes([0x5, 0b00100100])
    spi2.writebytes([0x6, 0b01111110])
    spi2.writebytes([0x7, 0b00000100])
    spi2.writebytes([0x8, 0b00000100])
    time.sleep(1)


def cijferVijf():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111110])
    spi.writebytes([0x3, 0b00100000])
    spi.writebytes([0x4, 0b00111100])
    spi.writebytes([0x5, 0b0000010])
    spi.writebytes([0x6, 0b00000010])
    spi.writebytes([0x7, 0b00100010])
    spi.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferVijf2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111110])
    spi2.writebytes([0x3, 0b00100000])
    spi2.writebytes([0x4, 0b00111100])
    spi2.writebytes([0x5, 0b0000010])
    spi2.writebytes([0x6, 0b00000010])
    spi2.writebytes([0x7, 0b00100010])
    spi2.writebytes([0x8, 0b00011100])
    time.sleep(1)


def volledigAan():
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11111111])
    spi.writebytes([0x5, 0b11111111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])


def volledigAan2():
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11111111])
    spi2.writebytes([0x5, 0b11111111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])


def clear_memory():
    spi.writebytes([0x1, 0])
    spi.writebytes([0x2, 0])
    spi.writebytes([0x3, 0])
    spi.writebytes([0x4, 0])
    spi.writebytes([0x5, 0])
    spi.writebytes([0x6, 0])
    spi.writebytes([0x7, 0])
    spi.writebytes([0x8, 0])


def clear_memory2():
    spi2.writebytes([0x1, 0])
    spi2.writebytes([0x2, 0])
    spi2.writebytes([0x3, 0])
    spi2.writebytes([0x4, 0])
    spi2.writebytes([0x5, 0])
    spi2.writebytes([0x6, 0])
    spi2.writebytes([0x7, 0])
    spi2.writebytes([0x8, 0])


def timeOut():
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()


def timeOut2():
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()


def aftellen_vijf_minuten():
    cijferVijf()
    timer()
    cijferVier()
    timer()
    cijferDrie()
    timer()
    cijferTwee()
    timer()
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_drie_minuten():
    cijferDrie()
    timer()
    cijferTwee()
    timer()
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_een_minuten():
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_vijf_minuten2():
    cijferVijf2()
    timer2()
    cijferVier2()
    timer2()
    cijferDrie2()
    timer2()
    cijferTwee2()
    timer2()
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()


def aftellen_drie_minuten2():
    cijferDrie2()
    timer2()
    cijferTwee2()
    timer2()
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()


def aftellen_een_minuten2():
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()

    # ANDERE FUNCTIES
if __name__ == '__main__':
    try:
        setup_gpio()
        print("**** Starting APP ****")
        start_thread()
        thread_serial()
        thread_eerste_kolom()
        thread_tweede_kolom()
        thread_derde_kolom()
        thread_vierde_kolom()
        thread_vijfde_kolom()
        thread_zesde_kolom()
        thread_zevende_kolom()
        socketio.run(app, debug=False, host='0.0.0.0')

    except KeyboardInterrupt:
        print('KeyboardInterrupt exception is caught')
    finally:
        GPIO.cleanup()
        mylcd.clear_lcd()
        clear_memory()
        clear_memory2()
