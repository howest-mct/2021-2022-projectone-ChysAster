# imports
import time
import json
from RPi import GPIO
import threading
from spidev import SpiDev
from flask_cors import CORS
from flask_socketio import SocketIO, emit, send
from flask import Flask, jsonify, request
from repositories.DataRepository import DataRepository
from subprocess import check_output
from selenium import webdriver
from pylcdlib import lcd4bit
from serial import Serial, PARITY_NONE

# get ip adres
ips = check_output(['hostname', '--all-ip-addresses'])
zonderB = str(ips)[18:32]
# write ip adres to lcd
mylcd = lcd4bit()
mylcd.write_message(zonderB)
mylcd.second_line()
mylcd.write_message("Scan your badge")

# set your batch numbers
badgeGeel = 188
badgeBlauw = 129
opdrachtGestartBlauw = False
opdrachtGestartGeel = False
opdrachtGeslaagdGeel = False
opdrachtGeslaagdBlauw = False


kleur = ''

# pin numbers of connected ir sensors
eersteKolom = 21
tweedeKolom = 22
derdeKolom = 20
vierdeKolom = 16
vijfdeKolom = 19
zesdeKolom = 13
zevendeKolom = 6

# pin numbers of buzzer
buzzer = 18
buzzer2 = 17

# api endpoint
endpoint = '/api/v1'

# setup serial perhipheral interface
spi = SpiDev()
spi2 = SpiDev()
spi2.open(0, 1)
spi.open(0, 0)  # Bus is 0, device is chosen CE-pin (0 or 1)
spi.max_speed_hz = 100  # setup clock frequency
spi2.max_speed_hz = 100

# setup your pi hardware


def setup_gpio():
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(eersteKolom, GPIO.IN)
    GPIO.setup(tweedeKolom, GPIO.IN)
    GPIO.setup(derdeKolom, GPIO.IN)
    GPIO.setup(vierdeKolom, GPIO.IN)
    GPIO.setup(vijfdeKolom, GPIO.IN)
    GPIO.setup(zesdeKolom, GPIO.IN)
    GPIO.setup(zevendeKolom, GPIO.IN)
    GPIO.setup(buzzer, GPIO.OUT)
    GPIO.setup(buzzer2, GPIO.OUT)
    spi.writebytes([0x9, 0])
    spi.writebytes([0xa, 0])
    spi.writebytes([0xb, 7])
    spi.writebytes([0xc, 1])
    spi2.writebytes([0x9, 0])
    spi2.writebytes([0xa, 0])
    spi2.writebytes([0xb, 7])
    spi2.writebytes([0xc, 1])


# Flask code
app = Flask(__name__)
app.config['SECRET_KEY'] = 'geheim!'
socketio = SocketIO(app, cors_allowed_origins="*", logger=False,
                    engineio_logger=False, ping_timeout=1)

CORS(app)

# socketia error handling


@socketio.on_error()
def error_handler(e):
    print(e)


# API ENDPOINTS
@app.route('/')
def hallo():
    return "Server is running, er zijn momenteel geen API endpoints beschikbaar."


@app.route(endpoint + '/activiteiten/', methods=['GET', 'POST'])
def get_activiteit():
    if request.method == 'GET':
        return jsonify(activiteit=DataRepository.random_activiteit()), 200
    elif request.method == 'POST':
        gegevens = DataRepository.json_or_formdata(request)
        nieuw_id = DataRepository.create_activiteit(
            gegevens['Activiteit'], gegevens['isWater'], gegevens['aantalMinuten'])
        return jsonify(activiteitid=nieuw_id), 201


@app.route(endpoint + '/historiek/', methods=['GET'])
def get_historiek():
    if request.method == 'GET':
        return jsonify(historiek=DataRepository.get_historiek()), 200


# @socketio.on()
# first connection socket
@socketio.on('connect')
def initial_connection():
    print('A new client connect')

# socket to start timer yellow


@socketio.on('F2B_opdracht_geel_minuten')
def opdracht_geel_timer(minuten_geel):
    if(minuten_geel == 1):
        start_thread_aftellen_een_minuten()
    elif(minuten_geel == 3):
        start_thread_aftellen_drie_minuten()
    elif(minuten_geel == 5):
        start_thread_aftellen_vijf_minuten()

# socket to start timer blue


@socketio.on('F2B_opdracht_blauw_minuten')
def opdracht_blauw_timer(minuten_blauw):
    if(minuten_blauw == 1):
        start_thread_aftellen_een_minuten2()
    elif(minuten_blauw == 3):
        start_thread_aftellen_drie_minuten2()
    elif(minuten_blauw == 5):
        start_thread_aftellen_vijf_minuten2()

# function to get temp


def temperatuur():
    sensor_file_name = '/sys/bus/w1/devices/28-00000003b2c6/w1_slave'

    sensor_file = open(sensor_file_name, 'r')
    for line in sensor_file:
        lijn = line.rstrip("\n")
        t = lijn.find("t=")

    if(t != -1):
        temp = int(lijn.split("t=")[1])
        return round(temp/1000, 2)

# Function to restart game


@socketio.on('F2B_restart_game')
def restart_game():
    global opdrachtGestartBlauw, opdrachtGestartGeel, opdrachtGeslaagdGeel, opdrachtGeslaagdBlauw
    opdrachtGestartBlauw = False
    opdrachtGestartGeel = False
    opdrachtGeslaagdGeel = False
    opdrachtGeslaagdBlauw = False
    DataRepository.reset_blauw()
    DataRepository.reset_geel()

# function that sends temp to backend + sends temp to database


def data_versturen():
    while True:
        print("temperatuur versturen")
        socketio.emit('B2F_status_temp', {
                      'temperatuur': temperatuur()}, broadcast=True)
        DataRepository.create_historiek(2, temperatuur())
        time.sleep(15)

# thread for temp


def start_thread():
    print("**** Starting THREAD ****")
    thread = threading.Thread(target=data_versturen, args=(), daemon=True)
    thread.start()

# function that gets serial data(rfid) from arduino + controls if it is yellow or blue and sens it to frontend


def read_serial():
    global opdrachtGestartBlauw, opdrachtGestartGeel
    with Serial('/dev/ttyS0', 9600, bytesize=8, parity=PARITY_NONE, stopbits=1) as port:
        while True:
            if port.in_waiting > 0:
                line = port.readline().decode('utf-8')  .rstrip()
                print(line)
                if line == str(badgeGeel):
                    mylcd.clear_lcd()
                    mylcd.write_message(zonderB)
                    mylcd.second_line()
                    mylcd.write_message("Team geel")
                    DataRepository.create_historiek(1, "geel")
                    # socketio.emit('B2F_rfid_data_geel', "geel", broadcast=True)
                    kleur = 'geel'
                    if opdrachtGestartGeel == False:
                        if(temperatuur() > 24):
                            activiteit_geel = DataRepository.random_activiteit_water_geel()
                        elif(temperatuur() < 24):
                            activiteit_geel = DataRepository.random_activiteit_geel()
                        opdrachtGestartGeel = True
                        socketio.emit('B2F_opdracht_geel',
                                      activiteit_geel, broadcast=True)
                    else:
                        socketio.emit('B2F_geslaagd_geel')
                elif line == str(badgeBlauw):
                    mylcd.clear_lcd()
                    mylcd.write_message(zonderB)
                    mylcd.second_line()
                    mylcd.write_message("Team blauw")
                    DataRepository.create_historiek(1, "blauw")
                    # socketio.emit('B2F_rfid_data_rood', "rood", broadcast=True)
                    kleur = 'blauw'
                    if opdrachtGestartBlauw == False:
                        if(temperatuur() > 24):
                            activiteit_blauw = DataRepository.random_activiteit_water_blauw()
                        elif(temperatuur() < 24):
                            activiteit_blauw = DataRepository.random_activiteit_blauw()
                        opdrachtGestartBlauw = True
                        socketio.emit('B2F_opdracht_blauw',
                                      activiteit_blauw, broadcast=True)
                    else:
                        socketio.emit('B2F_geslaagd_blauw')
                socketio.emit('B2F_rfid_data', kleur, broadcast=True)

# thread for serial


def thread_serial():
    print("**** Starting THREAD serial ****")
    thread = threading.Thread(target=read_serial, args=())
    thread.start()


@socketio.on('F2B_opdracht_geslaagd')
def opdracht_geslaagd(Geslaagd):
    global opdrachtGestartBlauw, opdrachtGestartGeel, opdrachtGeslaagdGeel, opdrachtGeslaagdBlauw
    if Geslaagd['geslaagd'] == False:
        if Geslaagd['kleur'] == 'geel':
            if(temperatuur() > 24):
                activiteit_geel = DataRepository.random_activiteit_water_geel()
            elif(temperatuur() < 24):
                activiteit_geel = DataRepository.random_activiteit_geel()
            opdrachtGestartGeel = True
            socketio.emit('B2F_opdracht_geel',
                          activiteit_geel, broadcast=True)
        elif Geslaagd['kleur'] == 'blauw':
            if(temperatuur() > 24):
                activiteit_blauw = DataRepository.random_activiteit_water_blauw()
            elif(temperatuur() < 24):
                activiteit_blauw = DataRepository.random_activiteit_blauw()
            opdrachtGestartBlauw = True
            socketio.emit('B2F_opdracht_blauw',
                          activiteit_blauw, broadcast=True)
        else:
            print("Kleur niet gekend")
    else:
        print("Opdracht is geslaagd")
        if Geslaagd['kleur'] == 'geel':
            opdrachtGeslaagdGeel = True
            opdrachtGestartGeel = False
            clear_memory()
        elif Geslaagd['kleur'] == 'blauw':
            opdrachtGeslaagdBlauw = True
            opdrachtGestartBlauw = False
            clear_memory2()


# frontend sends the played activity to backend and sets it as played in database


@socketio.on('F2B_opdracht_geel_is_gespeeld')
def set_geel_gespeeld(idActiviteiten):
    DataRepository.set_gespeeld_geel(idActiviteiten)

# frontend sends the played activity to backend and sets it as played in database


@socketio.on('F2B_opdracht_blauw_is_gespeeld')
def set_blauw_gespeeld(idActiviteiten):
    DataRepository.set_gespeeld_blauw(idActiviteiten)

# thread for timer game


def start_thread_aftellen_een_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_een_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game


def start_thread_aftellen_drie_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_drie_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game


def start_thread_aftellen_vijf_minuten():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_vijf_minuten, args=(), daemon=True)
    thread.start()

# thread for timer game


def start_thread_aftellen_een_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_een_minuten2, args=(), daemon=True)
    thread.start()

# thread for timer game


def start_thread_aftellen_drie_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_drie_minuten2, args=(), daemon=True)
    thread.start()

# thread for timer game


def start_thread_aftellen_vijf_minuten2():
    print("**** Starting THREAD ****")
    thread = threading.Thread(
        target=aftellen_vijf_minuten2, args=(), daemon=True)
    thread.start()


def mag_schijf_spelen():
    global opdrachtGeslaagdGeel, opdrachtGeslaagdBlauw
    if (opdrachtGeslaagdBlauw == True or opdrachtGeslaagdGeel == True):
        return True
    else:
        return False

# threads colums


def kolom():
    global opdrachtGeslaagdGeel, opdrachtGeslaagdBlauw
    while True:
        if(GPIO.input(eersteKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 0")
            socketio.emit('B2F_kolom', 0)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(tweedeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 1")
            socketio.emit('B2F_kolom', 1)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(derdeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 2")
            socketio.emit('B2F_kolom', 2)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(vierdeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 3")
            socketio.emit('B2F_kolom', 3)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(vijfdeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 4")
            socketio.emit('B2F_kolom', 4)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(zesdeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 5")
            socketio.emit('B2F_kolom', 5)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)
        elif (GPIO.input(zevendeKolom) == False and mag_schijf_spelen()):
            print("versturen infrarood 6")
            socketio.emit('B2F_kolom', 6)
            opdrachtGeslaagdBlauw = False
            opdrachtGeslaagdGeel = False
            time.sleep(5)


def thread_kolom():
    print("infrarood kolom thread")
    thread = threading.Thread(target=kolom)
    thread.start()

# buzzer and matrix


def buzzer_einde():
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer, GPIO.LOW)


def buzzer_einde2():
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)
    time.sleep(0.4)
    GPIO.output(buzzer2, GPIO.HIGH)
    time.sleep(0.5)
    GPIO.output(buzzer2, GPIO.LOW)


def timer():
    spi.writebytes([0x1, 0b10000000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11000000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11100000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11110000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111000])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111100])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111110])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000000])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000000])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000000])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000000])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000000])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000000])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000001])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000011])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00000111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00001111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00011111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b00111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b01111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b00000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b00000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b00000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b00000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b00000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b00000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b10000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11000001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11100001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11110001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111001])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111101])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000001])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000001])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000001])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000001])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000001])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000011])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10000111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10001111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10011111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b10000011])
    spi.writebytes([0x6, 0b10000011])
    spi.writebytes([0x7, 0b10111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b10000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b10000011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11000011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11100011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11110011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111011])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000011])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000011])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11000011])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11000111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11001111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11011111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11000111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11000111])
    spi.writebytes([0x5, 0b11100111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11100111])
    spi.writebytes([0x5, 0b11100111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])
    time.sleep(1)


def timer2():
    spi2.writebytes([0x1, 0b10000000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11000000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11100000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11110000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111000])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111100])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111110])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000000])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000000])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000000])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000000])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000000])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000000])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000000])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000001])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000011])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00000111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00001111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00011111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b00111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b01111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b00000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b00000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b00000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b00000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b00000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b00000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b10000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11000001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11100001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11110001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111001])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111101])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000001])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000001])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000001])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000001])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000001])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000011])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10000111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10001111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10011111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b10000011])
    spi2.writebytes([0x6, 0b10000011])
    spi2.writebytes([0x7, 0b10111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b10000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b10000011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11000011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11100011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11110011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111011])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000011])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000011])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11000011])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11000111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11001111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11011111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11000111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11000111])
    spi2.writebytes([0x5, 0b11100111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11100111])
    spi2.writebytes([0x5, 0b11100111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])
    time.sleep(1)


def cijferEen():
    spi.writebytes([0x1, 0b00001000])
    spi.writebytes([0x2, 0b00011000])
    spi.writebytes([0x3, 0b00001000])
    spi.writebytes([0x4, 0b00001000])
    spi.writebytes([0x5, 0b00001000])
    spi.writebytes([0x6, 0b00001000])
    spi.writebytes([0x7, 0b00001000])
    spi.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferEen2():
    spi2.writebytes([0x1, 0b00001000])
    spi2.writebytes([0x2, 0b00011000])
    spi2.writebytes([0x3, 0b00001000])
    spi2.writebytes([0x4, 0b00001000])
    spi2.writebytes([0x5, 0b00001000])
    spi2.writebytes([0x6, 0b00001000])
    spi2.writebytes([0x7, 0b00001000])
    spi2.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferTwee():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111000])
    spi.writebytes([0x3, 0b01000100])
    spi.writebytes([0x4, 0b00000100])
    spi.writebytes([0x5, 0b00001000])
    spi.writebytes([0x6, 0b00010000])
    spi.writebytes([0x7, 0b00100000])
    spi.writebytes([0x8, 0b01111100])
    time.sleep(1)


def cijferTwee2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111000])
    spi2.writebytes([0x3, 0b01000100])
    spi2.writebytes([0x4, 0b00000100])
    spi2.writebytes([0x5, 0b00001000])
    spi2.writebytes([0x6, 0b00010000])
    spi2.writebytes([0x7, 0b00100000])
    spi2.writebytes([0x8, 0b01111100])
    time.sleep(1)


def cijferDrie():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111000])
    spi.writebytes([0x3, 0b01000100])
    spi.writebytes([0x4, 0b00000100])
    spi.writebytes([0x5, 0b00011000])
    spi.writebytes([0x6, 0b00000100])
    spi.writebytes([0x7, 0b01000100])
    spi.writebytes([0x8, 0b00111000])
    time.sleep(1)


def cijferDrie2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111000])
    spi2.writebytes([0x3, 0b01000100])
    spi2.writebytes([0x4, 0b00000100])
    spi2.writebytes([0x5, 0b00011000])
    spi2.writebytes([0x6, 0b00000100])
    spi2.writebytes([0x7, 0b01000100])
    spi2.writebytes([0x8, 0b00111000])
    time.sleep(1)


def cijferVier():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00000100])
    spi.writebytes([0x3, 0b00001100])
    spi.writebytes([0x4, 0b00010100])
    spi.writebytes([0x5, 0b00100100])
    spi.writebytes([0x6, 0b01111110])
    spi.writebytes([0x7, 0b00000100])
    spi.writebytes([0x8, 0b00000100])
    time.sleep(1)


def cijferVier2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00000100])
    spi2.writebytes([0x3, 0b00001100])
    spi2.writebytes([0x4, 0b00010100])
    spi2.writebytes([0x5, 0b00100100])
    spi2.writebytes([0x6, 0b01111110])
    spi2.writebytes([0x7, 0b00000100])
    spi2.writebytes([0x8, 0b00000100])
    time.sleep(1)


def cijferVijf():
    spi.writebytes([0x1, 0b00000000])
    spi.writebytes([0x2, 0b00111110])
    spi.writebytes([0x3, 0b00100000])
    spi.writebytes([0x4, 0b00111100])
    spi.writebytes([0x5, 0b0000010])
    spi.writebytes([0x6, 0b00000010])
    spi.writebytes([0x7, 0b00100010])
    spi.writebytes([0x8, 0b00011100])
    time.sleep(1)


def cijferVijf2():
    spi2.writebytes([0x1, 0b00000000])
    spi2.writebytes([0x2, 0b00111110])
    spi2.writebytes([0x3, 0b00100000])
    spi2.writebytes([0x4, 0b00111100])
    spi2.writebytes([0x5, 0b0000010])
    spi2.writebytes([0x6, 0b00000010])
    spi2.writebytes([0x7, 0b00100010])
    spi2.writebytes([0x8, 0b00011100])
    time.sleep(1)


def volledigAan():
    spi.writebytes([0x1, 0b11111111])
    spi.writebytes([0x2, 0b11111111])
    spi.writebytes([0x3, 0b11111111])
    spi.writebytes([0x4, 0b11111111])
    spi.writebytes([0x5, 0b11111111])
    spi.writebytes([0x6, 0b11111111])
    spi.writebytes([0x7, 0b11111111])
    spi.writebytes([0x8, 0b11111111])


def volledigAan2():
    spi2.writebytes([0x1, 0b11111111])
    spi2.writebytes([0x2, 0b11111111])
    spi2.writebytes([0x3, 0b11111111])
    spi2.writebytes([0x4, 0b11111111])
    spi2.writebytes([0x5, 0b11111111])
    spi2.writebytes([0x6, 0b11111111])
    spi2.writebytes([0x7, 0b11111111])
    spi2.writebytes([0x8, 0b11111111])


def clear_memory():
    spi.writebytes([0x1, 0])
    spi.writebytes([0x2, 0])
    spi.writebytes([0x3, 0])
    spi.writebytes([0x4, 0])
    spi.writebytes([0x5, 0])
    spi.writebytes([0x6, 0])
    spi.writebytes([0x7, 0])
    spi.writebytes([0x8, 0])


def clear_memory2():
    spi2.writebytes([0x1, 0])
    spi2.writebytes([0x2, 0])
    spi2.writebytes([0x3, 0])
    spi2.writebytes([0x4, 0])
    spi2.writebytes([0x5, 0])
    spi2.writebytes([0x6, 0])
    spi2.writebytes([0x7, 0])
    spi2.writebytes([0x8, 0])


def timeOut():
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()
    time.sleep(0.5)
    clear_memory()
    time.sleep(0.5)
    volledigAan()


def timeOut2():
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()
    time.sleep(0.5)
    clear_memory2()
    time.sleep(0.5)
    volledigAan2()


def aftellen_vijf_minuten():
    cijferVijf()
    timer()
    cijferVier()
    timer()
    cijferDrie()
    timer()
    cijferTwee()
    timer()
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_drie_minuten():
    cijferDrie()
    timer()
    cijferTwee()
    timer()
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_een_minuten():
    cijferEen()
    timer()
    buzzer_einde()
    timeOut()
    clear_memory()


def aftellen_vijf_minuten2():
    cijferVijf2()
    timer2()
    cijferVier2()
    timer2()
    cijferDrie2()
    timer2()
    cijferTwee2()
    timer2()
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()


def aftellen_drie_minuten2():
    cijferDrie2()
    timer2()
    cijferTwee2()
    timer2()
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()


def aftellen_een_minuten2():
    cijferEen2()
    timer2()
    buzzer_einde2()
    timeOut2()
    clear_memory2()


    # ANDERE FUNCTIES
if __name__ == '__main__':
    try:
        setup_gpio()
        print("**** Starting APP ****")
        start_thread()
        thread_serial()
        thread_kolom()
        socketio.run(app, debug=False, host='0.0.0.0')

    except KeyboardInterrupt:
        print('KeyboardInterrupt exception is caught')
    finally:
        GPIO.cleanup()
        mylcd.clear_lcd()
        clear_memory()
        clear_memory2()
